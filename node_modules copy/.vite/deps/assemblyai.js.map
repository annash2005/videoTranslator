{
  "version": 3,
  "sources": ["../../ws/browser.js", "../../assemblyai/dist/index.mjs"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = function () {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n", "import ws from 'ws';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nconst buildUserAgent = (userAgent) => defaultUserAgentString +\n    (userAgent === false\n        ? \"\"\n        : \" AssemblyAI/1.0 (\" +\n            Object.entries(Object.assign(Object.assign({}, defaultUserAgent), userAgent))\n                .map(([key, item]) => item ? `${key}=${item.name}/${item.version}` : \"\")\n                .join(\" \") +\n            \")\");\nlet defaultUserAgentString = \"\";\nif (typeof navigator !== \"undefined\" && navigator.userAgent) {\n    defaultUserAgentString += navigator.userAgent;\n}\nconst defaultUserAgent = {\n    sdk: { name: \"JavaScript\", version: \"4.4.5\" },\n};\nif (typeof process !== \"undefined\") {\n    if (process.versions.node && defaultUserAgentString.indexOf(\"Node\") === -1) {\n        defaultUserAgent.runtime_env = {\n            name: \"Node\",\n            version: process.versions.node,\n        };\n    }\n    if (process.versions.bun && defaultUserAgentString.indexOf(\"Bun\") === -1) {\n        defaultUserAgent.runtime_env = {\n            name: \"Bun\",\n            version: process.versions.bun,\n        };\n    }\n}\nif (typeof Deno !== \"undefined\") {\n    if (process.versions.bun && defaultUserAgentString.indexOf(\"Deno\") === -1) {\n        defaultUserAgent.runtime_env = { name: \"Deno\", version: Deno.version.deno };\n    }\n}\n\n/**\n * Base class for services that communicate with the API.\n */\nclass BaseService {\n    /**\n     * Create a new service.\n     * @param params - The parameters to use for the service.\n     */\n    constructor(params) {\n        this.params = params;\n        if (params.userAgent === false) {\n            this.userAgent = undefined;\n        }\n        else {\n            this.userAgent = buildUserAgent(params.userAgent || {});\n        }\n    }\n    fetch(input, init) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            init = init !== null && init !== void 0 ? init : {};\n            let headers = (_a = init.headers) !== null && _a !== void 0 ? _a : {};\n            headers = Object.assign({ Authorization: this.params.apiKey, \"Content-Type\": \"application/json\" }, init.headers);\n            if (this.userAgent) {\n                headers[\"User-Agent\"] = this.userAgent;\n                // chromium browsers have a bug where the user agent can't be modified\n                if (typeof window !== \"undefined\" && \"chrome\" in window) {\n                    headers[\"AssemblyAI-Agent\"] =\n                        this.userAgent;\n                }\n            }\n            init.headers = headers;\n            init.cache = \"no-store\";\n            if (!input.startsWith(\"http\"))\n                input = this.params.baseUrl + input;\n            const response = yield fetch(input, init);\n            if (response.status >= 400) {\n                let json;\n                const text = yield response.text();\n                if (text) {\n                    try {\n                        json = JSON.parse(text);\n                    }\n                    catch (_b) {\n                        /* empty */\n                    }\n                    if (json === null || json === void 0 ? void 0 : json.error)\n                        throw new Error(json.error);\n                    throw new Error(text);\n                }\n                throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);\n            }\n            return response;\n        });\n    }\n    fetchJson(input, init) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.fetch(input, init);\n            return response.json();\n        });\n    }\n}\n\nclass LemurService extends BaseService {\n    summary(params) {\n        return this.fetchJson(\"/lemur/v3/generate/summary\", {\n            method: \"POST\",\n            body: JSON.stringify(params),\n        });\n    }\n    questionAnswer(params) {\n        return this.fetchJson(\"/lemur/v3/generate/question-answer\", {\n            method: \"POST\",\n            body: JSON.stringify(params),\n        });\n    }\n    actionItems(params) {\n        return this.fetchJson(\"/lemur/v3/generate/action-items\", {\n            method: \"POST\",\n            body: JSON.stringify(params),\n        });\n    }\n    task(params) {\n        return this.fetchJson(\"/lemur/v3/generate/task\", {\n            method: \"POST\",\n            body: JSON.stringify(params),\n        });\n    }\n    /**\n     * Delete the data for a previously submitted LeMUR request.\n     * @param id - ID of the LeMUR request\n     */\n    purgeRequestData(id) {\n        return this.fetchJson(`/lemur/v3/${id}`, {\n            method: \"DELETE\",\n        });\n    }\n}\n\nconst { WritableStream } = typeof window !== \"undefined\"\n    ? window\n    : typeof global !== \"undefined\"\n        ? global\n        : globalThis;\n\nconst factory = (url, params) => new ws(url, params);\n\nvar RealtimeErrorType;\n(function (RealtimeErrorType) {\n    RealtimeErrorType[RealtimeErrorType[\"BadSampleRate\"] = 4000] = \"BadSampleRate\";\n    RealtimeErrorType[RealtimeErrorType[\"AuthFailed\"] = 4001] = \"AuthFailed\";\n    // Both InsufficientFunds and FreeAccount error use 4002\n    RealtimeErrorType[RealtimeErrorType[\"InsufficientFundsOrFreeAccount\"] = 4002] = \"InsufficientFundsOrFreeAccount\";\n    RealtimeErrorType[RealtimeErrorType[\"NonexistentSessionId\"] = 4004] = \"NonexistentSessionId\";\n    RealtimeErrorType[RealtimeErrorType[\"SessionExpired\"] = 4008] = \"SessionExpired\";\n    RealtimeErrorType[RealtimeErrorType[\"ClosedSession\"] = 4010] = \"ClosedSession\";\n    RealtimeErrorType[RealtimeErrorType[\"RateLimited\"] = 4029] = \"RateLimited\";\n    RealtimeErrorType[RealtimeErrorType[\"UniqueSessionViolation\"] = 4030] = \"UniqueSessionViolation\";\n    RealtimeErrorType[RealtimeErrorType[\"SessionTimeout\"] = 4031] = \"SessionTimeout\";\n    RealtimeErrorType[RealtimeErrorType[\"AudioTooShort\"] = 4032] = \"AudioTooShort\";\n    RealtimeErrorType[RealtimeErrorType[\"AudioTooLong\"] = 4033] = \"AudioTooLong\";\n    RealtimeErrorType[RealtimeErrorType[\"BadJson\"] = 4100] = \"BadJson\";\n    RealtimeErrorType[RealtimeErrorType[\"BadSchema\"] = 4101] = \"BadSchema\";\n    RealtimeErrorType[RealtimeErrorType[\"TooManyStreams\"] = 4102] = \"TooManyStreams\";\n    RealtimeErrorType[RealtimeErrorType[\"Reconnected\"] = 4103] = \"Reconnected\";\n    RealtimeErrorType[RealtimeErrorType[\"ReconnectAttemptsExhausted\"] = 1013] = \"ReconnectAttemptsExhausted\";\n})(RealtimeErrorType || (RealtimeErrorType = {}));\nconst RealtimeErrorMessages = {\n    [RealtimeErrorType.BadSampleRate]: \"Sample rate must be a positive integer\",\n    [RealtimeErrorType.AuthFailed]: \"Not Authorized\",\n    [RealtimeErrorType.InsufficientFundsOrFreeAccount]: \"Insufficient funds or you are using a free account. This feature is paid-only and requires you to add a credit card. Please visit https://assemblyai.com/dashboard/ to add a credit card to your account.\",\n    [RealtimeErrorType.NonexistentSessionId]: \"Session ID does not exist\",\n    [RealtimeErrorType.SessionExpired]: \"Session has expired\",\n    [RealtimeErrorType.ClosedSession]: \"Session is closed\",\n    [RealtimeErrorType.RateLimited]: \"Rate limited\",\n    [RealtimeErrorType.UniqueSessionViolation]: \"Unique session violation\",\n    [RealtimeErrorType.SessionTimeout]: \"Session Timeout\",\n    [RealtimeErrorType.AudioTooShort]: \"Audio too short\",\n    [RealtimeErrorType.AudioTooLong]: \"Audio too long\",\n    [RealtimeErrorType.BadJson]: \"Bad JSON\",\n    [RealtimeErrorType.BadSchema]: \"Bad schema\",\n    [RealtimeErrorType.TooManyStreams]: \"Too many streams\",\n    [RealtimeErrorType.Reconnected]: \"Reconnected\",\n    [RealtimeErrorType.ReconnectAttemptsExhausted]: \"Reconnect attempts exhausted\",\n};\nclass RealtimeError extends Error {\n}\n\nconst defaultRealtimeUrl = \"wss://api.assemblyai.com/v2/realtime/ws\";\nconst forceEndOfUtteranceMessage = `{\"force_end_utterance\":true}`;\nconst terminateSessionMessage = `{\"terminate_session\":true}`;\nclass RealtimeTranscriber {\n    constructor(params) {\n        var _a, _b;\n        this.listeners = {};\n        this.realtimeUrl = (_a = params.realtimeUrl) !== null && _a !== void 0 ? _a : defaultRealtimeUrl;\n        this.sampleRate = (_b = params.sampleRate) !== null && _b !== void 0 ? _b : 16000;\n        this.wordBoost = params.wordBoost;\n        this.encoding = params.encoding;\n        this.endUtteranceSilenceThreshold = params.endUtteranceSilenceThreshold;\n        this.disablePartialTranscripts = params.disablePartialTranscripts;\n        if (\"token\" in params && params.token)\n            this.token = params.token;\n        if (\"apiKey\" in params && params.apiKey)\n            this.apiKey = params.apiKey;\n        if (!(this.token || this.apiKey)) {\n            throw new Error(\"API key or temporary token is required.\");\n        }\n    }\n    connectionUrl() {\n        const url = new URL(this.realtimeUrl);\n        if (url.protocol !== \"wss:\") {\n            throw new Error(\"Invalid protocol, must be wss\");\n        }\n        const searchParams = new URLSearchParams();\n        if (this.token) {\n            searchParams.set(\"token\", this.token);\n        }\n        searchParams.set(\"sample_rate\", this.sampleRate.toString());\n        if (this.wordBoost && this.wordBoost.length > 0) {\n            searchParams.set(\"word_boost\", JSON.stringify(this.wordBoost));\n        }\n        if (this.encoding) {\n            searchParams.set(\"encoding\", this.encoding);\n        }\n        searchParams.set(\"enable_extra_session_information\", \"true\");\n        if (this.disablePartialTranscripts) {\n            searchParams.set(\"disable_partial_transcripts\", this.disablePartialTranscripts.toString());\n        }\n        url.search = searchParams.toString();\n        return url;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    on(event, listener) {\n        this.listeners[event] = listener;\n    }\n    connect() {\n        return new Promise((resolve) => {\n            if (this.socket) {\n                throw new Error(\"Already connected\");\n            }\n            const url = this.connectionUrl();\n            if (this.token) {\n                this.socket = factory(url.toString());\n            }\n            else {\n                this.socket = factory(url.toString(), {\n                    headers: { Authorization: this.apiKey },\n                });\n            }\n            this.socket.binaryType = \"arraybuffer\";\n            this.socket.onopen = () => {\n                if (this.endUtteranceSilenceThreshold === undefined ||\n                    this.endUtteranceSilenceThreshold === null) {\n                    return;\n                }\n                this.configureEndUtteranceSilenceThreshold(this.endUtteranceSilenceThreshold);\n            };\n            this.socket.onclose = ({ code, reason }) => {\n                var _a, _b;\n                if (!reason) {\n                    if (code in RealtimeErrorType) {\n                        reason = RealtimeErrorMessages[code];\n                    }\n                }\n                (_b = (_a = this.listeners).close) === null || _b === void 0 ? void 0 : _b.call(_a, code, reason);\n            };\n            this.socket.onerror = (event) => {\n                var _a, _b, _c, _d;\n                if (event.error)\n                    (_b = (_a = this.listeners).error) === null || _b === void 0 ? void 0 : _b.call(_a, event.error);\n                else\n                    (_d = (_c = this.listeners).error) === null || _d === void 0 ? void 0 : _d.call(_c, new Error(event.message));\n            };\n            this.socket.onmessage = ({ data }) => {\n                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n                const message = JSON.parse(data.toString());\n                if (\"error\" in message) {\n                    (_b = (_a = this.listeners).error) === null || _b === void 0 ? void 0 : _b.call(_a, new RealtimeError(message.error));\n                    return;\n                }\n                switch (message.message_type) {\n                    case \"SessionBegins\": {\n                        const openObject = {\n                            sessionId: message.session_id,\n                            expiresAt: new Date(message.expires_at),\n                        };\n                        resolve(openObject);\n                        (_d = (_c = this.listeners).open) === null || _d === void 0 ? void 0 : _d.call(_c, openObject);\n                        break;\n                    }\n                    case \"PartialTranscript\": {\n                        // message.created is actually a string when coming from the socket\n                        message.created = new Date(message.created);\n                        (_f = (_e = this.listeners).transcript) === null || _f === void 0 ? void 0 : _f.call(_e, message);\n                        (_h = (_g = this.listeners)[\"transcript.partial\"]) === null || _h === void 0 ? void 0 : _h.call(_g, message);\n                        break;\n                    }\n                    case \"FinalTranscript\": {\n                        // message.created is actually a string when coming from the socket\n                        message.created = new Date(message.created);\n                        (_k = (_j = this.listeners).transcript) === null || _k === void 0 ? void 0 : _k.call(_j, message);\n                        (_m = (_l = this.listeners)[\"transcript.final\"]) === null || _m === void 0 ? void 0 : _m.call(_l, message);\n                        break;\n                    }\n                    case \"SessionInformation\": {\n                        (_p = (_o = this.listeners).session_information) === null || _p === void 0 ? void 0 : _p.call(_o, message);\n                        break;\n                    }\n                    case \"SessionTerminated\": {\n                        (_q = this.sessionTerminatedResolve) === null || _q === void 0 ? void 0 : _q.call(this);\n                        break;\n                    }\n                }\n            };\n        });\n    }\n    sendAudio(audio) {\n        this.send(audio);\n    }\n    stream() {\n        return new WritableStream({\n            write: (chunk) => {\n                this.sendAudio(chunk);\n            },\n        });\n    }\n    /**\n     * Manually end an utterance\n     */\n    forceEndUtterance() {\n        this.send(forceEndOfUtteranceMessage);\n    }\n    /**\n     * Configure the threshold for how long to wait before ending an utterance. Default is 700ms.\n     * @param threshold - The duration of the end utterance silence threshold in milliseconds.\n     * This value must be an integer between 0 and 20_000.\n     */\n    configureEndUtteranceSilenceThreshold(threshold) {\n        this.send(`{\"end_utterance_silence_threshold\":${threshold}}`);\n    }\n    send(data) {\n        if (!this.socket || this.socket.readyState !== this.socket.OPEN) {\n            throw new Error(\"Socket is not open for communication\");\n        }\n        this.socket.send(data);\n    }\n    close() {\n        return __awaiter(this, arguments, void 0, function* (waitForSessionTermination = true) {\n            var _a;\n            if (this.socket) {\n                if (this.socket.readyState === this.socket.OPEN) {\n                    if (waitForSessionTermination) {\n                        const sessionTerminatedPromise = new Promise((resolve) => {\n                            this.sessionTerminatedResolve = resolve;\n                        });\n                        this.socket.send(terminateSessionMessage);\n                        yield sessionTerminatedPromise;\n                    }\n                    else {\n                        this.socket.send(terminateSessionMessage);\n                    }\n                }\n                if ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.removeAllListeners)\n                    this.socket.removeAllListeners();\n                this.socket.close();\n            }\n            this.listeners = {};\n            this.socket = undefined;\n        });\n    }\n}\n/**\n * @deprecated Use RealtimeTranscriber instead\n */\nclass RealtimeService extends RealtimeTranscriber {\n}\n\nclass RealtimeTranscriberFactory extends BaseService {\n    constructor(params) {\n        super(params);\n        this.rtFactoryParams = params;\n    }\n    /**\n     * @deprecated Use transcriber(...) instead\n     */\n    createService(params) {\n        return this.transcriber(params);\n    }\n    transcriber(params) {\n        const serviceParams = Object.assign({}, params);\n        if (!serviceParams.token && !serviceParams.apiKey) {\n            serviceParams.apiKey = this.rtFactoryParams.apiKey;\n        }\n        return new RealtimeTranscriber(serviceParams);\n    }\n    createTemporaryToken(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.fetchJson(\"/v2/realtime/token\", {\n                method: \"POST\",\n                body: JSON.stringify(params),\n            });\n            return data.token;\n        });\n    }\n}\n/**\n * @deprecated Use RealtimeTranscriberFactory instead\n */\nclass RealtimeServiceFactory extends RealtimeTranscriberFactory {\n}\n\nfunction getPath(path) {\n    if (path.startsWith(\"http\"))\n        return null;\n    if (path.startsWith(\"https\"))\n        return null;\n    if (path.startsWith(\"data:\"))\n        return null;\n    if (path.startsWith(\"file://\"))\n        return path.substring(7);\n    if (path.startsWith(\"file:\"))\n        return path.substring(5);\n    return path;\n}\n\nclass TranscriptService extends BaseService {\n    constructor(params, files) {\n        super(params);\n        this.files = files;\n    }\n    /**\n     * Transcribe an audio file. This will create a transcript and wait until the transcript status is \"completed\" or \"error\".\n     * @param params - The parameters to transcribe an audio file.\n     * @param options - The options to transcribe an audio file.\n     * @returns A promise that resolves to the transcript. The transcript status is \"completed\" or \"error\".\n     */\n    transcribe(params, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            deprecateConformer2(params);\n            const transcript = yield this.submit(params);\n            return yield this.waitUntilReady(transcript.id, options);\n        });\n    }\n    /**\n     * Submits a transcription job for an audio file. This will not wait until the transcript status is \"completed\" or \"error\".\n     * @param params - The parameters to start the transcription of an audio file.\n     * @returns A promise that resolves to the queued transcript.\n     */\n    submit(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            deprecateConformer2(params);\n            let audioUrl;\n            let transcriptParams = undefined;\n            if (\"audio\" in params) {\n                const { audio } = params, audioTranscriptParams = __rest(params, [\"audio\"]);\n                if (typeof audio === \"string\") {\n                    const path = getPath(audio);\n                    if (path !== null) {\n                        // audio is local path, upload local file\n                        audioUrl = yield this.files.upload(path);\n                    }\n                    else {\n                        if (audio.startsWith(\"data:\")) {\n                            audioUrl = yield this.files.upload(audio);\n                        }\n                        else {\n                            // audio is not a local path, and not a data-URI, assume it's a normal URL\n                            audioUrl = audio;\n                        }\n                    }\n                }\n                else {\n                    // audio is of uploadable type\n                    audioUrl = yield this.files.upload(audio);\n                }\n                transcriptParams = Object.assign(Object.assign({}, audioTranscriptParams), { audio_url: audioUrl });\n            }\n            else {\n                transcriptParams = params;\n            }\n            const data = yield this.fetchJson(\"/v2/transcript\", {\n                method: \"POST\",\n                body: JSON.stringify(transcriptParams),\n            });\n            return data;\n        });\n    }\n    /**\n     * Create a transcript.\n     * @param params - The parameters to create a transcript.\n     * @param options - The options used for creating the new transcript.\n     * @returns A promise that resolves to the transcript.\n     * @deprecated Use `transcribe` instead to transcribe a audio file that includes polling, or `submit` to transcribe a audio file without polling.\n     */\n    create(params, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            deprecateConformer2(params);\n            const path = getPath(params.audio_url);\n            if (path !== null) {\n                const uploadUrl = yield this.files.upload(path);\n                params.audio_url = uploadUrl;\n            }\n            const data = yield this.fetchJson(\"/v2/transcript\", {\n                method: \"POST\",\n                body: JSON.stringify(params),\n            });\n            if ((_a = options === null || options === void 0 ? void 0 : options.poll) !== null && _a !== void 0 ? _a : true) {\n                return yield this.waitUntilReady(data.id, options);\n            }\n            return data;\n        });\n    }\n    /**\n     * Wait until the transcript ready, either the status is \"completed\" or \"error\".\n     * @param transcriptId - The ID of the transcript.\n     * @param options - The options to wait until the transcript is ready.\n     * @returns A promise that resolves to the transcript. The transcript status is \"completed\" or \"error\".\n     */\n    waitUntilReady(transcriptId, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            const pollingInterval = (_a = options === null || options === void 0 ? void 0 : options.pollingInterval) !== null && _a !== void 0 ? _a : 3000;\n            const pollingTimeout = (_b = options === null || options === void 0 ? void 0 : options.pollingTimeout) !== null && _b !== void 0 ? _b : -1;\n            const startTime = Date.now();\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const transcript = yield this.get(transcriptId);\n                if (transcript.status === \"completed\" || transcript.status === \"error\") {\n                    return transcript;\n                }\n                else if (pollingTimeout > 0 &&\n                    Date.now() - startTime > pollingTimeout) {\n                    throw new Error(\"Polling timeout\");\n                }\n                else {\n                    yield new Promise((resolve) => setTimeout(resolve, pollingInterval));\n                }\n            }\n        });\n    }\n    /**\n     * Retrieve a transcript.\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the transcript.\n     */\n    get(id) {\n        return this.fetchJson(`/v2/transcript/${id}`);\n    }\n    /**\n     * Retrieves a page of transcript listings.\n     * @param params - The parameters to filter the transcript list by, or the URL to retrieve the transcript list from.\n     */\n    list(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = \"/v2/transcript\";\n            if (typeof params === \"string\") {\n                url = params;\n            }\n            else if (params) {\n                url = `${url}?${new URLSearchParams(Object.keys(params).map((key) => {\n                    var _a;\n                    return [\n                        key,\n                        ((_a = params[key]) === null || _a === void 0 ? void 0 : _a.toString()) || \"\",\n                    ];\n                }))}`;\n            }\n            const data = yield this.fetchJson(url);\n            for (const transcriptListItem of data.transcripts) {\n                transcriptListItem.created = new Date(transcriptListItem.created);\n                if (transcriptListItem.completed) {\n                    transcriptListItem.completed = new Date(transcriptListItem.completed);\n                }\n            }\n            return data;\n        });\n    }\n    /**\n     * Delete a transcript\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the transcript.\n     */\n    delete(id) {\n        return this.fetchJson(`/v2/transcript/${id}`, { method: \"DELETE\" });\n    }\n    /**\n     * Search through the transcript for a specific set of keywords.\n     * You can search for individual words, numbers, or phrases containing up to five words or numbers.\n     * @param id - The identifier of the transcript.\n     * @param words - Keywords to search for.\n     * @returns A promise that resolves to the sentences.\n     */\n    wordSearch(id, words) {\n        const params = new URLSearchParams({ words: words.join(\",\") });\n        return this.fetchJson(`/v2/transcript/${id}/word-search?${params.toString()}`);\n    }\n    /**\n     * Retrieve all sentences of a transcript.\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the sentences.\n     */\n    sentences(id) {\n        return this.fetchJson(`/v2/transcript/${id}/sentences`);\n    }\n    /**\n     * Retrieve all paragraphs of a transcript.\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the paragraphs.\n     */\n    paragraphs(id) {\n        return this.fetchJson(`/v2/transcript/${id}/paragraphs`);\n    }\n    /**\n     * Retrieve subtitles of a transcript.\n     * @param id - The identifier of the transcript.\n     * @param format - The format of the subtitles.\n     * @param chars_per_caption - The maximum number of characters per caption.\n     * @returns A promise that resolves to the subtitles text.\n     */\n    subtitles(id_1) {\n        return __awaiter(this, arguments, void 0, function* (id, format = \"srt\", chars_per_caption) {\n            let url = `/v2/transcript/${id}/${format}`;\n            if (chars_per_caption) {\n                const params = new URLSearchParams();\n                params.set(\"chars_per_caption\", chars_per_caption.toString());\n                url += `?${params.toString()}`;\n            }\n            const response = yield this.fetch(url);\n            return yield response.text();\n        });\n    }\n    /**\n     * Retrieve redactions of a transcript.\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the subtitles text.\n     */\n    redactions(id) {\n        return this.fetchJson(`/v2/transcript/${id}/redacted-audio`);\n    }\n}\nfunction deprecateConformer2(params) {\n    if (!params)\n        return;\n    if (params.speech_model === \"conformer-2\") {\n        console.warn(\"The speech_model conformer-2 option is deprecated and will stop working in the near future. Use best or nano instead.\");\n    }\n}\n\nconst readFile = function (\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\npath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        throw new Error(\"Interacting with the file system is not supported in this environment.\");\n    });\n};\n\nclass FileService extends BaseService {\n    /**\n     * Upload a local file to AssemblyAI.\n     * @param input - The local file path to upload, or a stream or buffer of the file to upload.\n     * @returns A promise that resolves to the uploaded file URL.\n     */\n    upload(input) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let fileData;\n            if (typeof input === \"string\") {\n                if (input.startsWith(\"data:\")) {\n                    fileData = dataUrlToBlob(input);\n                }\n                else {\n                    fileData = yield readFile();\n                }\n            }\n            else\n                fileData = input;\n            const data = yield this.fetchJson(\"/v2/upload\", {\n                method: \"POST\",\n                body: fileData,\n                headers: {\n                    \"Content-Type\": \"application/octet-stream\",\n                },\n                duplex: \"half\",\n            });\n            return data.upload_url;\n        });\n    }\n}\nfunction dataUrlToBlob(dataUrl) {\n    const arr = dataUrl.split(\",\");\n    const mime = arr[0].match(/:(.*?);/)[1];\n    const bstr = atob(arr[1]);\n    let n = bstr.length;\n    const u8arr = new Uint8Array(n);\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new Blob([u8arr], { type: mime });\n}\n\nconst defaultBaseUrl = \"https://api.assemblyai.com\";\nclass AssemblyAI {\n    /**\n     * Create a new AssemblyAI client.\n     * @param params - The parameters for the service, including the API key and base URL, if any.\n     */\n    constructor(params) {\n        params.baseUrl = params.baseUrl || defaultBaseUrl;\n        if (params.baseUrl && params.baseUrl.endsWith(\"/\")) {\n            params.baseUrl = params.baseUrl.slice(0, -1);\n        }\n        this.files = new FileService(params);\n        this.transcripts = new TranscriptService(params, this.files);\n        this.lemur = new LemurService(params);\n        this.realtime = new RealtimeTranscriberFactory(params);\n    }\n}\n\nexport { AssemblyAI, FileService, LemurService, RealtimeService, RealtimeServiceFactory, RealtimeTranscriber, RealtimeTranscriberFactory, TranscriptService };\n"],
  "mappings": "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",
  "names": ["ws", "RealtimeErrorType"]
}
